/* * ************************************************************************ * Copyright (C) 2012-2015 MennÄ“ Software Solutions, LLC * * This code is released as open source under the Apache 2.0 License:<br/> * <a href="http://www.apache.org/licenses/LICENSE-2.0"> * http://www.apache.org/licenses/LICENSE-2.0</a><br /> * ************************************************************************ */package com.moneydance.modules.features.ratios;import com.infinitekind.moneydance.model.TxnUtil;import com.moneydance.apps.md.view.gui.MoneydanceGUI;import com.moneydance.apps.md.view.gui.txnreg.TxnTagsField;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.ListModel;import java.awt.Component;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;/** * A tags selection control that has added ability to report when it has changed and to select * all of the tags or none of them. */class SearchTxnTagsField  extends TxnTagsField{  private final List<ActionListener> _selectionListeners = new ArrayList<ActionListener>();  private TxnTagFilterView _view;  private final List<String> _allTags;  public SearchTxnTagsField(TxnTagFilterView view, MoneydanceGUI mdGUI)  {    super(mdGUI, mdGUI.getCurrentBook());    _view = view;    _allTags = TxnUtil.getListOfAllUsedTransactionTags(mdGUI.getCurrentBook().getTransactionSet().getAllTxns());    for (Component child : getComponents())    {      if (child instanceof JComponent)      {        ((JComponent)child).setOpaque(false);      }      // show a popup window when clicking the button      if (child instanceof JButton)      {        JButton selectorButton = (JButton)child;        selectorButton.addActionListener(new ActionListener()        {          public void actionPerformed(ActionEvent e)          {            fireTagSelectEvent(N12ERatios.SELECT_TAG_LIST);          }        });      }    }  }  @Override  public synchronized void selectorButtonPressed() {      super.selectorButtonPressed();      _view.selectUseTags();  }  void selectAll() {    setSelectedTags(_allTags);    repaint();  }  void selectNone() {    setSelectedTags("");    repaint();  }  Component getView() {    return _view;  }  ListModel<String> getFullTagsList() {    DefaultListModel<String> result = new DefaultListModel<String>();    for (String knownTag : _allTags) {      result.addElement(knownTag);    }    return result;  }  boolean isTagSelected(String keyword) {    return getSelectedTags().contains(keyword);  }  void toggle(String keyword) {    List<String> currentTags = getSelectedTags();    if (currentTags.contains(keyword))    {      currentTags.remove(keyword);    }    else    {      currentTags.add(keyword);    }    setSelectedTags(currentTags);    repaint();  }  void addSelectionListener(final ActionListener listener)  {    _selectionListeners.add(listener);  }  void removeSelectionListener(final ActionListener listener)  {    _selectionListeners.remove(listener);  }  private void fireTagSelectEvent(final String eventName)  {    for (final ActionListener listener : _selectionListeners)    {      listener.actionPerformed(new ActionEvent(this, 0, eventName));    }  }}