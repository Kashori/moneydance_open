/* * ************************************************************************ * Copyright (C) 2015 MennÄ“ Software Solutions, LLC * * This code is released as open source under the Apache 2.0 License:<br/> * <a href="http://www.apache.org/licenses/LICENSE-2.0"> * http://www.apache.org/licenses/LICENSE-2.0</a><br /> * ************************************************************************ */package com.moneydance.modules.features.ratios;import com.infinitekind.moneydance.model.Account;import com.infinitekind.moneydance.model.AccountBook;import com.infinitekind.util.StringUtils;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class TxnTagUtils {  private static final String TAG_PARAM_PREFIX = "md.txntag.";  public static List<String> convertTags(String candidate, Map<Integer, String> tagMap) {    List<String> result = new ArrayList<String>();    if (StringUtils.isBlank(candidate)) return result;    if ((tagMap == null) || tagMap.isEmpty()) return RatiosUtil.fromCSV(candidate);    // look for a list of integers separated by pipe '|'    String[] tagList = candidate.split(N12ERatios.BAR_REGEX);    if (tagList.length == 1) {      // we probably already have a comma-separated list      if (tagList[0].indexOf(',') >= 0) {        return RatiosUtil.fromCSV(tagList[0]);      }      // but just in case they had a single tag that needs converting...      try {        Integer tagKey = Integer.valueOf(tagList[0]);        if (tagMap.containsKey(tagKey)) {          result.add(tagMap.get(tagKey));          return result;        }        return result;      } catch (NumberFormatException e) {        return RatiosUtil.fromCSV(tagList[0]);      }    }    // we have a list of numeric tag IDs, convert to a list of strings    for (String tag : tagList) {      try {        Integer tagKey = Integer.valueOf(tag);        if (tagMap.containsKey(tagKey)) {          result.add(tagMap.get(tagKey));        } else {          result.add(tag);        }      } catch (NumberFormatException e) {        result.add(tag);      }    }    return result;  }  public static Map<Integer, String> loadLegacyTagMap(AccountBook book) {    Map<Integer, String> result = new HashMap<Integer, String>();    int prefixLen = TAG_PARAM_PREFIX.length();    Account root = book.getRootAccount();    for (String key : root.getParameterKeys()) {      if (!key.startsWith(TAG_PARAM_PREFIX)) continue;      try {        String tagName = root.getParameter(key, null);        String tagID = key.substring(prefixLen);        Integer tagKey = Integer.valueOf(tagID);        result.put(tagKey, tagName);      } catch (NumberFormatException ignore) {        // skip this one, unexpected format      }    }    return result;  }}