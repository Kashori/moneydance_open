/*
 * PriceEntryScreen.java
 *
 *  Created: 2008-06-27
 * 
 * Modified: 2011-11-11
 
 * This class is part of Security Price Entry, which is an extension
 * to the Moneydance personal finance program.
 *
 * Original Copyright (C) 2011 by Thomas Edelson of Songline Software
 * (www.songline-software.com).
 * 
 * Now Copyright (c) 2015 The Infinite Kind Limited (infinitekind.com)
 * 
 */

package com.moneydance.modules.features.priceui.priceEntry;


import com.infinitekind.util.CustomDateFormat;
import com.infinitekind.util.DateUtil;
import com.moneydance.apps.md.controller.UserPreferences;
import com.moneydance.awt.GridC;
import com.moneydance.awt.JDateField;
import com.moneydance.modules.features.priceui.swing.RightAlignedCellRenderer;

import javax.swing.*;
import javax.swing.table.TableCellRenderer;
import java.awt.*;


/**
 * Defines the GUI used for displaying, and entering, prices for securities
 * owned by -- or otherwise of interest to -- the user.
 * 
 * @author  Tom Edelson
 * 
 */

public class PriceEntryScreen extends javax.swing.JFrame {
    
    /*
     * This is partly generated code, courtesy of NetBeans.
     * 
     * This code is intended to be portable between different 
     * personal finance software packages.
     * 
     */
   
    private PriceEntryExec responder;
    
    private TableCellRenderer currentPriceRenderer = new RightAlignedCellRenderer();
    
    private PriceTableModel tableModel;
    
    /*
     * Additional declarations of instance variables are in generated code
     * which appears at the bottom of this source file.
     * 
     */ 

   
    /** 
     * Creates (but does not display) new PriceEntryScreen window object.
     * 
     * @param model the "table model" from which the table in this form
     * will get its data.
     * 
     * @param responderObject the object to which this form object will call back to
     * execute user-requested actions.
     * 
     */
    
    public PriceEntryScreen (PriceTableModel model, 
            PriceEntryExec responderObject) {
        
        tableModel = model;
        responder = responderObject;
        
        initComponents();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
       
        // The following is a workaround for a bug in JTable
        //  (See "http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4709394"):

        priceTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        
    } // end constructor
    

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * 
     */
   
    @SuppressWarnings("unchecked")
    private void initComponents() {
        CustomDateFormat dateFormat = UserPreferences.getInstance().getShortDateFormatter();
        jLabel2 = new javax.swing.JLabel();
        makeCurrentFlagChbox = new javax.swing.JCheckBox();
        asOfDate = new JDateField(dateFormat);
        asOfDate.setDateInt(calcAsOfDate());
        jScrollPane1 = new javax.swing.JScrollPane();
        priceTable = new PriceEntryJTable();
        applyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        setTitle("Security Prices");

        jLabel2.setText("As-of Date:");

        makeCurrentFlagChbox.setSelected(true);
        makeCurrentFlagChbox.setText("Also set these prices as \"current\"");

        priceTable.setModel(tableModel);
        jScrollPane1.setViewportView(priceTable);
        
        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        
        JPanel p = new JPanel(new GridBagLayout());
        JPanel asOfPanel = new JPanel(new GridBagLayout());
        asOfPanel.add(jLabel2, GridC.getc(0,0).label());
        asOfPanel.add(asOfDate, GridC.getc(1,0).field());
        asOfPanel.add(makeCurrentFlagChbox, GridC.getc(0,1).colspan(2).insets(18,0,0,0));
        p.add(asOfPanel, GridC.getc(0,1).center().insets(18, 18, 18, 18));
        p.add(jScrollPane1, GridC.getc(0, 2).wxy(1, 1));
        p.add(applyButton, GridC.getc(0,3).east().insets(10,50,10,10));
        setContentPane(p);
        pack();
    }



private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {
   responder.applyPrices();
}


    /** 
     * Returns the "as-of date", or effective date, of the prices in the window.
     *
     * @return the effective date of the prices entered.
     * This may be the calculated, default value which was initially presented
     * to the user (to wit, the last day of the previous month),
     * or it may be a value entered by the user to replace the default.
     * 
     */

public int getAsOfDate() {
    return asOfDate.getDateInt();
}

    
    /** 
     * Returns an indication as to whether the prices entered in the window
     * should be considered to be the "current prices" for those securities.
     * 
     * @return the "make-current flag", which is true if these are the "current"
     * prices, and false if they are not.  This value is true by default, but
     * the user can change it to false (for example, if the prices entered
     * are from a broker's statement other than the most recent one).
     * 
     */

public boolean getMakeCurrentFlag() {
    return makeCurrentFlagChbox.isSelected();
}


/*
 * Returns a Date which represents the last day of the previous month,
 * at noon.
 * 
 * Ideally, I'd break out a separate utility function which took a Date
 * argument, so I could test the algorithm by feeding it lots of test cases.
 * 
 * Called by: initComponents()
 *
 */
private int calcAsOfDate() {
    int today = DateUtil.getStrippedDateInt();
    return DateUtil.incrementDate(today, 0, 0, (today%100)*-1); // the last day of the previous month
} //Â end method calcAsOfDate


/**
 * Customization of JTable, so that the "Current Price" column
 * will be formatted right-aligned.
 * 
 */

class PriceEntryJTable extends JTable {
    
    
    @Override
        
    public TableCellRenderer getCellRenderer (int row, int column) {
        if (column == PriceTableModel.currentPriceColumn) {
            return currentPriceRenderer;
        } else {
            return super.getCellRenderer(row, column);
        }
    } // end getCellRenderer

} // end nested class PriceEntryJTable


    private javax.swing.JButton applyButton;
    private JDateField asOfDate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox makeCurrentFlagChbox;
    private javax.swing.JTable priceTable;


} // end class PriceEntryScreen
